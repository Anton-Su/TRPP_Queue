from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from validation import form_correctslinks
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from schedule import refresh_schedule, get_schedule
from deletion import delete_old_sessions
import sqlite3
import logging
import asyncio


load_dotenv() # –ø–æ–ª—É—á–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
TOKEN = getenv("BOT_TOKEN")
dp = Dispatcher()
scheduler = AsyncIOScheduler()
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s") # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)
bot = Bot(token=TOKEN)
kbregister = ReplyKeyboardMarkup( # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    keyboard=[
        [KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–í—ã–π—Ç–∏")],
        [KeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ], resize_keyboard=True)
kbnotregister = ReplyKeyboardMarkup( # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    keyboard=[
        [KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]
    ], resize_keyboard=True)


class RegisterState(StatesGroup): # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
    group = State()
    name = State()
    surname = State()
    middle_name = State()


async def dindin(): # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è
    print("–ü–∞—Ä—ã –≤ –ø–µ—Ä–∏–æ–¥ —Ç–∞–∫–æ–π-—Ç–æ –Ω–∞—á–∞–ª–∏—Å—å")
    pass


async def dandalan(): # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ –∑–∞–Ω—è—Ç–∏—è
    print("–ü–∞—Ä—ã –≤ –ø–µ—Ä–∏–æ–¥ —Ç–∞–∫–æ–π-—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
    pass


def generate_calendar(raspisanie): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã-–∫–∞–ª–µ–Ω–¥–∞—Ä—è
    days_of_week = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    keyboard = []
    for raspisanieday in raspisanie:
        current_date = datetime.now()
        day = datetime(current_date.year, raspisanieday[0], raspisanieday[1])
        day_name = days_of_week[day.strftime("%A")]  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        button = InlineKeyboardButton(
            text=f"{day.strftime('%d.%m.%Y')} ({day_name})",
            callback_data=f"date_{day.strftime('%Y-%m-%d')}"
        )
        keyboard.append([button])
    keyboard.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="remove_keyboard")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def generatescheduler_to_currect_day(): # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    current_date = datetime.now()
    hour_minute = cursor.execute("SELECT DISTINCT Hour, Minute FROM Timetable WHERE Month = ? AND Day = ?",
                                 (current_date.month, current_date.day)).fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π
    if hour_minute:
        for hour, minute in hour_minute:
            existing_job = scheduler.get_job(f"{hour}_{minute}")
            if not existing_job: # –µ—Å–ª–∏ id —Ç–∞–∫–æ–≥–æ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å
                start_date = datetime(current_date.year, current_date.month, current_date.day, hour, minute)
                end_date = start_date + timedelta(minutes=90)
                scheduler.add_job(dindin, 'date', run_date=start_date, id=f"{hour}_{minute}")
                scheduler.add_job(dandalan, 'date', run_date=end_date, id=f"{end_date.hour}_{end_date.minute}")


@dp.message(Command("stats")) # –ö–æ–º–∞–Ω–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
@dp.message(lambda message: message.text == "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    results = []
    year = datetime.now().year
    result = cursor.execute("""
        SELECT T.Task, T.TeacherFIO, T.Month, T.Day, T.Hour, T.Minute, T.Location, O.Poryadok
        FROM Timetable T
        JOIN Ochered O ON T.Id = O.Numseance
        WHERE O.Id = ?
        ORDER BY T.Month ASC, T.Day ASC, T.Hour ASC, T.Minute ASC
    """, (user_id,)).fetchall()
    for index, (subject, teacherfio, month, date, hour, minite, location, Poryadok) in enumerate(result, start=1):
        results.append(
            f"{index}. {Poryadok} –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏, {str(date).rjust(2, '0')}.{str(month).rjust(2, '0')}.{year} {str(hour).rjust(2, '0')}:{str(minite).rjust(2, '0')}\n¬´{subject}¬ª, –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ ¬´{location}¬ª, –≤–µ–¥—ë—Ç {teacherfio}")
    conn.commit()
    conn.close()
    results.insert(0, f'–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(results)}')
    await message.answer("\n".join(results), reply_markup=kbregister)


@dp.message(Command("exit"))  # –ö–æ–º–∞–Ω–¥–∞ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@dp.message(lambda message: message.text == "–í—ã–π—Ç–∏")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ "–í—ã–π—Ç–∏"
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    group = cursor.execute("SELECT GroupName FROM Users WHERE Id = ?", (user_id,)).fetchone()[0]
    count = len(cursor.execute("SELECT Id FROM Users WHERE GroupName = ?", (group,)).fetchall())
    numseances = cursor.execute("SELECT DISTINCT Numseance FROM Ochered WHERE Id = ?", (user_id,)).fetchall() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ numseance, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω
    cursor.execute("DELETE FROM Ochered WHERE Id = ?", (user_id,))
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ (Poryadok) –¥–ª—è –≤—Å–µ—Ö numseance, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for (numseance,) in numseances:
        records = cursor.execute("""SELECT Id FROM Ochered WHERE Numseance = ? ORDER BY Poryadok ASC""", (numseance,)).fetchall()
        for index, (record_id,) in enumerate(records, start=1):
            cursor.execute("UPDATE Ochered SET Poryadok = ? WHERE Id = ?", (index, record_id))
    cursor.execute("DELETE FROM Users WHERE Id = ?", (user_id,))
    if count == 1: # –ï—Å–ª–∏ –æ–Ω –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã, —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        cursor.execute("DELETE FROM All_groups WHERE GroupName = ?", (group,))
        cursor.execute("DELETE FROM Timetable WHERE GroupName = ?", (group,))
        await message.answer(f"–Æ–∑–µ—Ä, –¥–æ–≤–æ–∂—É –¥–æ –≤–∞—à–µ–≥–æ —Å–≤–µ–¥–µ–Ω–∏—è: —Å –≤–∞—à–∏–º —É—Ö–æ–¥–æ–º –≥—Ä—É–ø–ø–∞ ¬´{group}¬ª —Ä–∞—Å–ø—É—â–µ–Ω–∞!")
    conn.commit()
    conn.close()
    await message.answer("üò¢üò¢üò¢–û—á–µ–Ω—å –∂–∞–ª—å —Å –≤–∞–º–∏ —Ä–∞—Å—Å—Ç–∞–≤–∞—Ç—å—Å—è, –Æ–∑–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ—Å–∫–æ—Ä–µ–µ!!!!!", reply_markup=kbnotregister)


@dp.message(Command("start")) # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async def command_start_handler(message: Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—á–µ—Ä–µ–¥–∏, –∑–∞–ø–∏—Å—ã–≤–∞—é, –æ—Ç–ø–∏—Å—ã–≤–∞—é, —Å–ª–µ–∂—É, –∏ –≤—Å—ë —Ç–∞–∫–æ–µ. –ü—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è, –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –∞–≤–æ—Å—å", reply_markup=kbnotregister)


@dp.message(Command("help")) # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ "–ü–æ–º–æ—â—å"
async def send_help(message: Message):
    #await message.answer("–ê–ê–ê–ê–ê! –ê–ª—å—Ç—É—à–∫–∞–∞–∞–∞–∞ –≤ –±–µ–ª—ã—Ö —á—É–ª–æ—á–∫–∞–∞–∞–∞—Ö", reply_markup=kbnotregister)
    await message.answer("–ß–µ—Ä–µ–∑ 20 –ª–µ—Ç –≤—ã –±—É–¥–µ—Ç–µ –±–æ–ª—å—à–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω—ã —Ç–µ–º–∏ –≤–µ—â–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –¥–µ–ª–∞–ª–∏, —á–µ–º —Ç–µ–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–¥–µ–ª–∞–ª–∏. –¢–∞–∫ –æ—Ç—á–∞–ª—å—Ç–µ –æ—Ç —Ç–∏—Ö–æ–π –ø—Ä–∏—Å—Ç–∞–Ω–∏. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –ø–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä –≤ –≤–∞—à–µ–º –ø–∞—Ä—É—Å–µ. –î–≤–∏–≥–∞–π—Ç–µ—Å—å –≤–ø–µ—Ä–µ–¥, –¥–µ–π—Å—Ç–≤—É–π—Ç–µ, –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ!", reply_markup=kbnotregister)


@dp.callback_query(F.data.startswith("back_to_calendar_"))
async def back_to_calendar(callback: CallbackQuery):
    await show_calendar(user_id=callback.from_user.id, callback=callback)


async def show_calendar(user_id: int, message: types.Message = None, callback: CallbackQuery = None): #–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏ callback-–∑–∞–ø—Ä–æ—Å–∞
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    group = cursor.execute("SELECT GroupName FROM Users WHERE Id = ?", (user_id,)).fetchone()
    if not group:
        if message:
            return await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kbnotregister)
        return await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kbnotregister)
    raspisanie = cursor.execute(
        "SELECT DISTINCT Month, Day FROM Timetable WHERE GroupName = ? ORDER BY Month ASC, Day ASC",
        (group[0],)).fetchall()
    conn.close()
    keyboard = generate_calendar(raspisanie)
    if message: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥–∞—Ç–æ–π:", reply_markup=keyboard)
    elif callback:
        await callback.message.edit_text("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥–∞—Ç–æ–π:", reply_markup=keyboard)


@dp.message(Command("record")) # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@dp.message(lambda message: message.text == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å") # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
async def command_start_handler(message: types.Message) -> None:
    await show_calendar(user_id=message.from_user.id, message=message)


@dp.callback_query(F.data.startswith("remove_keyboard"))
async def remove_keyboard(callback: CallbackQuery): #  –£–¥–∞–ª—è–µ—Ç –≤—Å—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    await callback.message.delete()


@dp.callback_query(F.data.startswith("date_")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def show_schedule(callback: CallbackQuery):
    selected_date = callback.data.split("_")[1]  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    user_id = callback.from_user.id
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    groupname = cursor.execute("SELECT GroupName FROM Users WHERE Id = ?", (user_id,)).fetchone()[0] # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subjects = cursor.execute("""SELECT Task, Month, Day, Hour, Minute, Location FROM Timetable WHERE GroupName = ? AND Month = ? AND Day = ?""",
                              (groupname, selected_date.split("-")[1], selected_date.split("-")[2])).fetchall() # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    conn.close()
    keyboard = []
    for subject in subjects:
        task, month, day, hour, minute, location = subject
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞, –≤—Ä–µ–º–µ–Ω–µ–º –∏ –º–µ—Å—Ç–æ–º
        text = f"{location} {str(hour).rjust(2, '0')}:{str(minute).rjust(2, '0')} - {task}"
        button = InlineKeyboardButton(
            text=text[0:60],  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            callback_data=f"subject_{month}_{day}_{hour}_{minute}_{location}_{groupname}"  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ callback_data –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        )
        keyboard.append([button])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_calendar_{selected_date}")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="remove_keyboard")])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


@dp.callback_query(F.data.startswith("subject_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
async def handle_subject(callback: CallbackQuery):
    _, month, day, hour, minute, location, groupname = callback.data.split("_")
    user_id = callback.from_user.id
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    numseance = cursor.execute("SELECT Id FROM Timetable WHERE GroupName = ? AND Month = ? AND Day = ? AND Hour = ? AND Minute = ? AND Location = ?",(groupname, month, day, hour, minute, location)).fetchone()[0]
    result = cursor.execute("""SELECT MAX(Poryadok) FROM Ochered WHERE numseance = ?""", (numseance,)).fetchone()
    if result[0] is not None:
        new_poryadok = result[0] + 1 # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã, result[0] –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–º Poryadok
    else:
        new_poryadok = 1
    if cursor.execute("SELECT 1 FROM Ochered WHERE Numseance = ? AND Id = ?", (numseance, user_id)).fetchone():
        cursor.execute("DELETE FROM Ochered WHERE Numseance = ? AND Id = ?", (numseance, user_id))
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ Poryadok
        records = cursor.execute("""SELECT Id FROM Ochered WHERE numseance = ? ORDER BY Poryadok ASC""", (numseance,)).fetchall()
        for index, (record_id,) in enumerate(records, start=1): # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º Poryadok –∑–∞–Ω–æ–≤–æ
            cursor.execute("""UPDATE Ochered SET Poryadok = ? WHERE Id = ?""", (index, record_id))
        conn.commit()
        conn.close()
        return await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    cursor.execute("""INSERT INTO Ochered (Numseance, Id, Poryadok) VALUES (?, ?, ?)""", (numseance, user_id, new_poryadok))
    conn.commit()
    conn.close()
    await callback.answer(f"–£—Å–ø–µ—à–Ω–æ! –í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {new_poryadok}")


@dp.message(Command("register")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
async def register(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    groupname = cursor.execute("SELECT GroupName FROM Users WHERE ID = ?", (user_id,)).fetchone()
    if not groupname:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
        await state.set_state(RegisterState.group)
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=kbregister)
    conn.close()


@dp.message(RegisterState.group) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
async def process_group(message: types.Message, state: FSMContext):
    await state.update_data(group=message.text.upper())
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    url = cursor.execute("SELECT Url FROM Session WHERE GroupName = ?", (message.text.upper(),)).fetchone()
    conn.close()
    if not url:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=kbnotregister)
        await state.clear()
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegisterState.name)


@dp.message(RegisterState.name) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.capitalize())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegisterState.surname)


@dp.message(RegisterState.surname) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text.capitalize())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '-'): ")
    await state.set_state(RegisterState.middle_name)


@dp.message(RegisterState.middle_name) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
async def process_middle_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    middle_name = message.text.capitalize() if message.text != "-" else None
    conn = sqlite3.connect(getenv("DATABASE_URL"))
    cursor = conn.cursor()
    cursor.execute("""INSERT INTO Users (ID, GroupName, NAME, SURNAME, MIDDLE_NAME) VALUES (?, ?, ?, ?, ?)""",
                   (message.from_user.id, user_data['group'], user_data['name'], user_data['surname'], middle_name))
    conn.commit()
    if not cursor.execute("SELECT 1 FROM All_groups WHERE GroupName = ?", (user_data['group'],)).fetchone(): # –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        cursor.execute("""INSERT INTO All_groups (GroupName) VALUES (?)""", (user_data['group'],))
        conn.commit()
        cursor.execute("SELECT Url FROM Session WHERE GroupName = ?", (user_data['group'],))
        url = cursor.fetchone()[0]
        await get_schedule(url, user_data['group'])
        await generatescheduler_to_currect_day()
    conn.close()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=kbregister)
    await state.clear()


async def main_async() -> None: # Run the bot
    await delete_old_sessions()
    await refresh_schedule()
    await generatescheduler_to_currect_day() # –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è
    scheduler.add_job(refresh_schedule, day_of_week='sun', trigger='cron', hour=0, minute=30)
    scheduler.add_job(form_correctslinks, 'cron', month=9, day=1, hour=0, minute=30)
    scheduler.add_job(generatescheduler_to_currect_day, trigger='cron', hour=7, minute=30)
    scheduler.start()
    await dp.start_polling(bot)


def main() -> None:
    asyncio.run(main_async())

if __name__ == '__main__':
    main()